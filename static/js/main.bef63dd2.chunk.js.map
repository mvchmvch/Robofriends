{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","exports.js","serviceWorker.js","containers/reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","state","fetch","then","response","json","users","setState","this","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,MAAMC,IAAG,+BAA2BH,KAC7C,6BACA,4BAAKF,GACL,2BAAIC,MCaQK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAAMC,IAAKD,EACXR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCGPW,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACE,yBAAKX,UAAU,OACd,2BAAOY,KAAK,SACXZ,UAAU,mCACTa,YAAY,gBACZC,SAAUH,MCGDI,EAVA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SACpBC,OAAQ,kBACRC,OAAQ,UACTJ,EAAMK,WCeJC,G,kBACL,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZnB,OAAQ,IAHI,E,iFAOO,IAAD,OACnBoB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACzB,OAAQwB,S,+BAG9B,IACFxB,EAAU0B,KAAKP,MAAfnB,OADC,EAE+B0B,KAAKd,MAArCe,EAFC,EAEDA,YAAaC,EAFZ,EAEYA,eACdC,EAAiB7B,EAAO8B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASN,EAAYK,kBAEtD,OAAQhC,EAAOkC,OAEb,yBAAKtC,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWW,aAAcqB,IACzB,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQ6B,MALnB,2C,GArBeM,cAgCHC,eA5CS,SAAAjB,GACvB,MAAO,CACNQ,YAAaR,EAAMQ,gBAIM,SAACU,GAC3B,MAAO,CACNT,eAAgB,SAACU,GAAD,OAAWD,EChBY,CACxC7B,KCFkC,sBDGlC+B,QDcoDD,EAAME,OAAOC,YAoCnDL,CAA6ClB,GGzCxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UChBAC,EAAe,CACpBpB,YAAa,ICYRqB,EAASC,yBACTC,EAAQC,aDVc,WAAsC,IAArChC,EAAoC,uDAA9B4B,EAAcK,EAAgB,uDAAP,GACzD,OAAQA,EAAO5C,MACd,IFRiC,sBEShC,OAAO6C,OAAOC,OAAO,GAAInC,EAAO,CAACQ,YAAcyB,EAAOb,UACvD,QACC,OAAOpB,KCK8BoC,YAAgBP,IAGxDQ,IAASC,OAAO,kBAAC,IAAD,CAAUP,MAASA,GAC9B,kBAAC,EAAD,OACYQ,SAASC,eAAe,SF4GnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.bef63dd2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='aaa' src ={`https://robohash.org/${id}`} />\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t {\r\n\t\t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\t\r\n\t\t\t\t\t<Card key={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email} />\r\n\t\t\t\t)  \r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input type='search'\r\n\t\t\t\t className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t \t placeholder='search robots'\r\n\t\t\t \t onChange={searchChange} \r\n\t\t\t />\r\n\t\t\t </div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', \r\n\t\t\t\t\tborder: '5px solid black', \r\n\t\t\t\t\theight: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css'\r\n\r\nimport {setSearchField} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchField\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: []\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({robots: users}));\r\n\t\t\r\n\t}\r\n\trender() {\r\n\t\tconst {robots} = this.state;\r\n\t\tconst {searchField, onSearchChange} =  this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length ? \r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t(<div className='tc'>\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from './exports.js'\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD} from '../exports.js'\r\n\r\nconst initialState = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField : action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {Provider, connect} from 'react-redux'\r\nimport {createStore, applyMiddleware} from 'redux'\r\nimport {createLogger} from 'redux-logger'\r\n\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport CardList from './components/CardList';\r\nimport {searchRobots} from './containers/reducers';\r\n\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(searchRobots, applyMiddleware(logger))\r\n\r\n\r\nReactDOM.render(<Provider store = {store}>\r\n\t\t\t\t\t<App /> \r\n\t\t\t\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}